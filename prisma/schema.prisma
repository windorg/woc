generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Board {
  id                  String               @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title               String               @default("")
  ownerId             String               @map("owner_id") @db.Uuid
  createdAt           DateTime             @default(now()) @map("created_at") @db.Timestamptz(6)
  settings            Json
  owner               User                 @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "boards_ref_owner_id")
  cards               Card[]
  subscriptionUpdates SubscriptionUpdate[]

  @@index([ownerId], map: "boards_owner_id_index")
  @@map("boards")
}

model Card {
  id                  String               @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title               String               @default("")
  boardId             String               @map("board_id") @db.Uuid
  createdAt           DateTime             @default(now()) @map("created_at") @db.Timestamptz(6)
  settings            Json
  ownerId             String               @map("owner_id") @db.Uuid
  board               Board                @relation(fields: [boardId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "cards_ref_board_id")
  owner               User                 @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "cards_ref_owner_id")
  comments            Comment[]
  subscriptionUpdates SubscriptionUpdate[]

  @@index([ownerId], map: "cards_owner_id_index")
  @@map("cards")
}

model Comment {
  id                  String               @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  // If we ever add "updatedAt", see the note in 'updateComment'
  createdAt           DateTime             @default(now()) @map("created_at") @db.Timestamptz(6)
  content             String
  cardId              String               @map("card_id") @db.Uuid
  settings            Json
  ownerId             String               @map("owner_id") @db.Uuid
  card                Card                 @relation(fields: [cardId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "card_updates_ref_card_id")
  owner               User                 @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "card_updates_ref_owner_id")
  replies             Reply[]
  subscriptionUpdates SubscriptionUpdate[]

  @@index([cardId], map: "card_updates_card_id_index")
  @@index([ownerId], map: "card_updates_owner_id_index")
  @@map("card_updates")
}

model FollowedUser {
  id             String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  subscriberId   String   @map("subscriber_id") @db.Uuid
  followedUserId String   @map("followed_user_id") @db.Uuid
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  followedUser   User     @relation("followed_users_followed_user_idTousers", fields: [followedUserId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "followed_users_ref_followed_user_id")
  subscriber     User     @relation("followed_users_subscriber_idTousers", fields: [subscriberId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "followed_users_ref_subscriber_id")

  @@unique([subscriberId, followedUserId], map: "followed_users_unique")
  @@index([followedUserId], map: "followed_users_followed_user_id_index")
  @@index([subscriberId], map: "followed_users_subscriber_id_index")
  @@map("followed_users")
}

model Reply {
  id                  String               @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt           DateTime             @default(now()) @map("created_at") @db.Timestamptz(6)
  content             String
  commentId           String               @map("card_update_id") @db.Uuid
  authorId            String?              @map("author_id") @db.Uuid
  settings            Json
  author              User?                @relation(fields: [authorId], references: [id], onUpdate: NoAction, map: "replies_ref_author_id")
  comment             Comment              @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "replies_ref_card_update_id")
  subscriptionUpdates SubscriptionUpdate[]

  @@index([authorId], map: "replies_author_id_index")
  @@index([commentId], map: "replies_card_update_id_index")
  @@map("replies")
}

model SubscriptionUpdate {
  id           String                   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  subscriberId String                   @map("subscriber_id") @db.Uuid
  boardId      String?                  @map("board_id") @db.Uuid
  cardId       String?                  @map("card_id") @db.Uuid
  commentId    String?                  @map("card_update_id") @db.Uuid
  replyId      String?                  @map("reply_id") @db.Uuid
  createdAt    DateTime                 @default(now()) @map("created_at") @db.Timestamptz(6)
  updateKind   subscription_update_kind @map("update_kind")
  // TODO is this still used?
  isRead       Boolean                  @default(false) @map("is_read")
  board        Board?                   @relation(fields: [boardId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "subscription_updates_ref_board_id")
  card         Card?                    @relation(fields: [cardId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "subscription_updates_ref_card_id")
  comment      Comment?                 @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "subscription_updates_ref_card_update_id")
  reply        Reply?                   @relation(fields: [replyId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "subscription_updates_ref_reply_id")
  user         User                     @relation(fields: [subscriberId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "subscription_updates_ref_subscriber_id")

  @@index([boardId], map: "subscription_updates_board_id_index")
  @@index([cardId], map: "subscription_updates_card_id_index")
  @@index([commentId], map: "subscription_updates_card_update_id_index")
  @@index([replyId], map: "subscription_updates_reply_id_index")
  @@index([subscriberId], map: "subscription_updates_subscriber_id_index")
  @@map("subscription_updates")
}

model User {
  id                  String               @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email               String               @unique
  handle              String               @unique
  createdAt           DateTime             @default(now()) @map("created_at") @db.Timestamptz(6)
  displayName         String               @map("display_name")
  passwordHash        String               @map("password_hash")
  lockedAt            DateTime?            @map("locked_at") @db.Timestamptz(6)
  failedLoginAttempts Int                  @default(0) @map("failed_login_attempts")
  boards              Board[]
  cards               Card[]
  comments            Comment[]
  followedUserRefs    FollowedUser[]       @relation("followed_users_followed_user_idTousers")
  subscriberRefs      FollowedUser[]       @relation("followed_users_subscriber_idTousers")
  replies             Reply[]
  subscriptionUpdates SubscriptionUpdate[]

  @@map("users")
}

enum job_status {
  job_status_not_started
  job_status_running
  job_status_failed
  job_status_timed_out
  job_status_succeeded
  job_status_retry
}

enum subscription_update_kind {
  suk_board
  suk_card
  suk_card_update // Comment
  suk_reply
}
